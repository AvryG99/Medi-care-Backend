{
    "swagger": "2.0",
    "basePath": "/flask",
    "info": {
      "title": "Hospital API",
      "version": "1.0",
      "description": "API documentation for Hospital Management System"
    },
    "paths": {
      "/flash/process_question": {
        "post": {
          "tags": ["LLM Agent"],
          "summary": "Process the question and get the answer",
          "description": "Process the question using the LLM agent and return the answer.",
          "parameters": [
            {
              "in": "body",
              "name": "question",
              "description": "The question to process",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "question": {
                    "type": "string",
                    "example": "What is the patient's age?"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully processed the question and returned the answer",
              "schema": {
                "type": "object",
                "properties": {
                  "question": {
                    "type": "string",
                    "example": "What is the patient's age?"
                  },
                  "answer": {
                    "type": "string",
                    "example": "The patient is 32 years old."
                  }
                }
              }
            },
            "400": {
              "description": "Missing 'question' field in the request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/flash/health": {
        "get": {
          "tags": ["Health"],
          "summary": "Check API health status",
          "description": "Verify if the API is up and running.",
          "responses": {
            "200": {
              "description": "API is running",
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "API is running."
                  }
                }
              }
            }
          }
        }
      },
      "/flash/get_logs": {
        "get": {
          "tags": ["Logs"],
          "summary": "Fetch the contents of the log file",
          "description": "Retrieve the logs generated by the LLM agent.",
          "responses": {
            "200": {
              "description": "Successfully retrieved logs",
              "schema": {
                "type": "object",
                "properties": {
                  "logs": {
                    "type": "string",
                    "example": "Log content here..."
                  }
                }
              }
            },
            "404": {
              "description": "Log file not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/flash/set_model": {
        "post": {
          "tags": ["Configuration"],
          "summary": "Set a new model for the LLM Agent",
          "description": "Update the LLM Agent model.",
          "parameters": [
            {
              "in": "body",
              "name": "model",
              "description": "The model to be set for the agent",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "example": "gpt-4"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated model",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Model updated to gpt-4"
                  }
                }
              }
            },
            "400": {
              "description": "Missing 'model' field in the request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/flash/set_max_tokens": {
        "post": {
          "tags": ["Configuration"],
          "summary": "Set the max tokens for the LLM Agent",
          "description": "Update the maximum number of tokens for the LLM Agent.",
          "parameters": [
            {
              "in": "body",
              "name": "max_tokens",
              "description": "The maximum tokens to be set for the agent",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "max_tokens": {
                    "type": "integer",
                    "example": 2048
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated max tokens",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Max tokens updated to 2048"
                  }
                }
              }
            },
            "400": {
              "description": "Missing 'max_tokens' field in the request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/flash/set_temperature": {
        "post": {
          "tags": ["Configuration"],
          "summary": "Set the temperature for the LLM Agent",
          "description": "Update the temperature for the LLM Agent.",
          "parameters": [
            {
              "in": "body",
              "name": "temperature",
              "description": "The temperature to be set for the agent",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "temperature": {
                    "type": "number",
                    "format": "float",
                    "example": 0.7
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated temperature",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Temperature updated to 0.7"
                  }
                }
              }
            },
            "400": {
              "description": "Missing 'temperature' field in the request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      }
    },
    "definitions": {}
  }
  